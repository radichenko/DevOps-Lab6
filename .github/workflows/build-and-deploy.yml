name: Build and Deploy to Kubernetes

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  IMAGE_REGISTRY: registry.digitalocean.com/lab5registry

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set image tag
        id: set_image_tag
        run: echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Log in to DigitalOcean Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DO_REGISTRY_USER }}
          password: ${{ secrets.DO_REGISTRY_TOKEN }}

      - name: Build and push CommunicationControl
        run: |
          docker build -t ${{ env.IMAGE_REGISTRY }}/communication-control:latest -t ${{ env.IMAGE_REGISTRY }}/communication-control:${{ steps.set_image_tag.outputs.tag }} -f src/CommunicationControl/DevOpsProject/Dockerfile .
          docker push ${{ env.IMAGE_REGISTRY }}/communication-control --all-tags

      - name: Build and push HiveMind
        run: |
          docker build -t ${{ env.IMAGE_REGISTRY }}/hivemind:latest -t ${{ env.IMAGE_REGISTRY }}/hivemind:${{ steps.set_image_tag.outputs.tag }} -f src/CommunicationControl/DevOpsProject.HiveMind.API/Dockerfile .
          docker push ${{ env.IMAGE_REGISTRY }}/hivemind --all-tags

      - name: Build and push MapClient
        run: |
          docker build -t ${{ env.IMAGE_REGISTRY }}/map-client:latest -t ${{ env.IMAGE_REGISTRY }}/map-client:${{ steps.set_image_tag.outputs.tag }} -f src/MapClient/Dockerfile src/MapClient
          docker push ${{ env.IMAGE_REGISTRY }}/map-client --all-tags

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'development' }}
      url: ${{ steps.get_map_client_ip.outputs.ip_address }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "NAMESPACE=lab6-prod" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "dev" ]; then
            echo "NAMESPACE=lab6-dev" >> $GITHUB_ENV
          else
            echo "NAMESPACE=lab6-feature-${{ github.ref_name }}" >> $GITHUB_ENV
          fi
          echo "IMAGE_TO_DEPLOY_TAG=${{ needs.build-and-push.outputs.image_tag }}" >> $GITHUB_ENV

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up GKE credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_CREDENTIALS }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: autopilot-cluster-lab6-cluster1
          location: europe-west1
          project_id: absolute-cubist-461719-f9

      - name: Update image tag in Kubernetes manifests
        run: |
          mkdir -p ./manifest-deploy
          cp -r ./manifest/* ./manifest-deploy/
          for yaml_file in ./manifest-deploy/*-deployment.yaml; do
            sed -i 's|image: ${{ env.IMAGE_REGISTRY }}/\([^:]*\):\([a-zA-Z0-9._-]*\)|image: ${{ env.IMAGE_REGISTRY }}/\1:${{ env.IMAGE_TO_DEPLOY_TAG }}|g' "$yaml_file"
          done

      - name: Deploy manifests to GKE
        run: |
          kubectl apply -f ./manifest-deploy/ -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment communication-control -n ${{ env.NAMESPACE }} --timeout=2m
          kubectl rollout status deployment hivemind -n ${{ env.NAMESPACE }} --timeout=2m
          kubectl rollout status deployment map-client -n ${{ env.NAMESPACE }} --timeout=2m

      - name: Get MapClient LoadBalancer IP
        id: get_map_client_ip
        if: success()
        run: |
          MAP_CLIENT_IP=""
          for i in {1..30}; do
            MAP_CLIENT_IP=$(kubectl get service map-client -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [ -n "$MAP_CLIENT_IP" ]; then
              echo "ip_address=http://$MAP_CLIENT_IP" >> $GITHUB_OUTPUT
              break
            fi
            sleep 10
          done